{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\Spoken\\\\src\\\\Pages\\\\Discution.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Message from '../Composants/Message';\nconst SpeechToText = window.SpeechRecognition || window.webkitSpeechRecorgnition;\nconst SpeechApi = new SpeechToText();\nconst output = document.querySelector(\".output\");\nSpeechApi.continuous = true;\nSpeechApi.interimResult = false;\n\nSpeechApi.onresult = event => {\n  var resultIndex = event.resultIndex;\n  var transcript = event.results[resultIndex][0].transcript;\n  this.output.textContent = transcript;\n};\n\nfunction init() {\n  this.SpeechApi.start();\n}\n\nfunction stop() {\n  this.SpeechApi.stop();\n}\n\nwindow.onload = function () {\n  var speech = new SpeechRecognitionApi({\n    output: document.querySelector(\".output\")\n  });\n  document.querySelector(\".btn-start\").addEventListener(\"click\", () => {\n    speech.init();\n  });\n  document.querySelector(\".btn-end\").addEventListener(\"click\", () => {\n    speech.srop();\n  });\n};\n\nexport default class TypeChambre extends Component {\n  render() {\n    let messages = [{\n      id: 1,\n      auteur: \"wadi\",\n      msg: \"bonjour comment cv\"\n    }, {\n      id: 2,\n      auteur: \"Koko\",\n      msg: \"salut wadi cv et toi\"\n    }, {\n      id: 3,\n      auteur: \"bobo\",\n      msg: \"ey wesh ma geule\"\n    }];\n    messages = messages.map(message => {\n      return React.createElement(Message, {\n        key: message.id,\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    });\n    return React.createElement(React.Fragment, null, React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      class: \"btn-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"start\"), React.createElement(\"button\", {\n      class: \"btn-end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"end\"), React.createElement(\"textarea\", {\n      class: \"output\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, messages)));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Spoken/src/Pages/Discution.js"],"names":["React","Component","Link","Message","SpeechToText","window","SpeechRecognition","webkitSpeechRecorgnition","SpeechApi","output","document","querySelector","continuous","interimResult","onresult","event","resultIndex","transcript","results","textContent","init","start","stop","onload","speech","SpeechRecognitionApi","addEventListener","srop","TypeChambre","render","messages","id","auteur","msg","map","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAGQ,MAAMC,YAAY,GAAGC,MAAM,CAACC,iBAAP,IAA4BD,MAAM,CAACE,wBAAxD;AACA,MAAMC,SAAS,GAAG,IAAIJ,YAAJ,EAAlB;AACA,MAAMK,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAf;AACAH,SAAS,CAACI,UAAV,GAAuB,IAAvB;AACAJ,SAAS,CAACK,aAAV,GAA0B,KAA1B;;AACAL,SAAS,CAACM,QAAV,GAAsBC,KAAD,IAAW;AAC5B,MAAIC,WAAW,GAAGD,KAAK,CAACC,WAAxB;AACA,MAAIC,UAAU,GAAGF,KAAK,CAACG,OAAN,CAAcF,WAAd,EAA2B,CAA3B,EAA8BC,UAA/C;AACA,OAAKR,MAAL,CAAYU,WAAZ,GAA0BF,UAA1B;AACH,CAJD;;AAMJ,SAASG,IAAT,GAAe;AACX,OAAKZ,SAAL,CAAea,KAAf;AACH;;AACD,SAASC,IAAT,GAAe;AACX,OAAKd,SAAL,CAAec,IAAf;AACH;;AAGLjB,MAAM,CAACkB,MAAP,GAAgB,YAAU;AACtB,MAAIC,MAAM,GAAG,IAAIC,oBAAJ,CAAyB;AAClChB,IAAAA,MAAM,EAACC,QAAQ,CAACC,aAAT,CAAuB,SAAvB;AAD2B,GAAzB,CAAb;AAGAD,EAAAA,QAAQ,CAACC,aAAT,CAAuB,YAAvB,EAAqCe,gBAArC,CAAsD,OAAtD,EAA+D,MAAK;AAChEF,IAAAA,MAAM,CAACJ,IAAP;AACH,GAFD;AAGAV,EAAAA,QAAQ,CAACC,aAAT,CAAuB,UAAvB,EAAmCe,gBAAnC,CAAoD,OAApD,EAA6D,MAAK;AAC9DF,IAAAA,MAAM,CAACG,IAAP;AACH,GAFD;AAGH,CAVD;;AAaA,eAAe,MAAMC,WAAN,SAA0B3B,SAA1B,CAAoC;AAE/C4B,EAAAA,MAAM,GAAG;AACL,QAAIC,QAAQ,GAAC,CACT;AAACC,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAC,MAAd;AAAsBC,MAAAA,GAAG,EAAC;AAA1B,KADS,EAET;AAACF,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAC,MAAd;AAAsBC,MAAAA,GAAG,EAAC;AAA1B,KAFS,EAGT;AAACF,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAC,MAAd;AAAsBC,MAAAA,GAAG,EAAC;AAA1B,KAHS,CAAb;AAOAH,IAAAA,QAAQ,GAAGA,QAAQ,CAACI,GAAT,CAAaC,OAAO,IAAE;AAC/B,aAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,OAAO,CAACJ,EAAtB;AAA0B,QAAA,OAAO,EAAEI,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFU,CAAX;AAGA,WACR,0CAEY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,EAGI;AAAU,MAAA,KAAK,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAFZ,EAQY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACML,QADN,CADD,CARZ,CADQ;AAsBH;;AAnC8C","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Message from '../Composants/Message'\r\n\r\n\r\n        const SpeechToText = window.SpeechRecognition || window.webkitSpeechRecorgnition;\r\n        const SpeechApi = new SpeechToText\r\n        const output = document.querySelector(\".output\")\r\n        SpeechApi.continuous = true;\r\n        SpeechApi.interimResult = false;\r\n        SpeechApi.onresult = (event) => {\r\n            var resultIndex = event.resultIndex;\r\n            var transcript = event.results[resultIndex][0].transcript;\r\n            this.output.textContent = transcript;\r\n        }\r\n   \r\n    function init(){\r\n        this.SpeechApi.start();\r\n    }\r\n    function stop(){\r\n        this.SpeechApi.stop();\r\n    }\r\n\r\n\r\nwindow.onload = function(){\r\n    var speech = new SpeechRecognitionApi({\r\n        output:document.querySelector(\".output\")\r\n    })\r\n    document.querySelector(\".btn-start\").addEventListener(\"click\", () =>{\r\n        speech.init();\r\n    })\r\n    document.querySelector(\".btn-end\").addEventListener(\"click\", () =>{\r\n        speech.srop();\r\n    })\r\n}\r\n\r\n\r\nexport default class TypeChambre extends Component {\r\n     \r\n    render() {\r\n        let messages=[\r\n            {id:1 ,auteur:\"wadi\", msg:\"bonjour comment cv\"},\r\n            {id:2 ,auteur:\"Koko\", msg:\"salut wadi cv et toi\"},\r\n            {id:3 ,auteur:\"bobo\", msg:\"ey wesh ma geule\"}\r\n\r\n        ]\r\n\r\n        messages = messages.map(message=>{\r\n          return <Message key={message.id} message={message} />\r\n        })\r\n        return (\r\n<>\r\n\r\n            <section>\r\n                <button class=\"btn-start\">start</button>\r\n                <button class=\"btn-end\">end</button>\r\n                <textarea class=\"output\"></textarea>\r\n                \r\n            </section>\r\n            <section>\r\n             <div>\r\n                  {messages}  \r\n             </div>\r\n             \r\n            </section>\r\n\r\n           \r\n            \r\n\r\n</>\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}