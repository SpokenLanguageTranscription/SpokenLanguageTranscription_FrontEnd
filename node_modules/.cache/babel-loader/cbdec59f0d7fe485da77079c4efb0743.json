{"ast":null,"code":"var _jsxFileName = \"D:\\\\setup\\\\Test_reactJS\\\\SpokenLanguageTranscription_FrontEnd\\\\src\\\\Composants\\\\Speech.js\";\nimport React, { Component } from \"react\"; //------------------------SPEECH RECOGNITION-----------------------------\n\n/* const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\n\r\nrecognition.continous = true\r\nrecognition.interimResults = true\r\nrecognition.lang = 'fr-FR'*/\n//------------------------COMPONENT-----------------------------\n\nexport default class Speech extends Component {\n  constructor() {\n    super();\n    this.state = {\n      listening: false\n    };\n    this.toggleListen = this.toggleListen.bind(this);\n    this.handleListen = this.handleListen.bind(this);\n  }\n\n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen);\n  }\n\n  handleListen() {\n    const SpeechRecognition = window.webkitSpeechRecognition; //const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\n\n    const recognition = new SpeechRecognition();\n    recognition.continous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'fr-FR';\n    console.log('listening?', this.state.listening);\n\n    if (this.state.listening) {\n      recognition.start();\n\n      recognition.onend = () => {\n        console.log(\"...continue listening...\");\n        recognition.start();\n      };\n    } else {\n      recognition.stop();\n\n      recognition.onend = () => {\n        console.log(\"Stopped listening per click\");\n      };\n    }\n\n    recognition.onstart = () => {\n      console.log(\"Listening!\");\n    };\n\n    let finalTranscript = '';\n\n    recognition.onresult = event => {\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';else interimTranscript += transcript;\n      }\n\n      document.getElementById('interim').innerHTML = interimTranscript;\n      document.getElementById('final').innerHTML = finalTranscript; //*************Resultat******************* */\n\n      if (interimTranscript === 'suivant') {\n        console.log(finalTranscript);\n        document.getElementById('resultat').innerHTML = \"Bravo\";\n      } //-------------------------COMMANDS------------------------------------\n\n\n      const transcriptArr = finalTranscript.split(' ');\n      const stopCmd = transcriptArr.slice(-3, -1);\n      console.log('stopCmd', stopCmd);\n\n      if (stopCmd[0] === 'stop' && stopCmd[1] === 'stop') {\n        recognition.stop();\n\n        recognition.onend = () => {\n          console.log('Stopped listening per command');\n          const finalText = transcriptArr.slice(0, -3).join(' ');\n          document.getElementById('final').innerHTML = finalText; //document.getElementById('resultat').innerHTML = finalText \n        };\n      }\n    }; //-----------------------------------------------------------------------\n\n\n    recognition.onerror = event => {\n      console.log(\"Error occurred in recognition: \" + event.error);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      class: \"LoginBack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"microphone-btn\",\n      style: button,\n      onClick: this.toggleListen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"interim\",\n      style: interim,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"final\",\n      style: final,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"resultat\",\n      style: resultat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------CSS------------------------------------\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  button: {\n    width: '60px',\n    height: '60px',\n    background: 'lightblue',\n    borderRadius: '50%',\n    margin: '6em 0 2em 0'\n  },\n  interim: {\n    color: 'gray',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  },\n  final: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  },\n  resultat: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  }\n};\nconst {\n  container,\n  button,\n  interim,\n  final,\n  resultat\n} = styles;","map":{"version":3,"sources":["D:/setup/Test_reactJS/SpokenLanguageTranscription_FrontEnd/src/Composants/Speech.js"],"names":["React","Component","Speech","constructor","state","listening","toggleListen","bind","handleListen","setState","SpeechRecognition","window","webkitSpeechRecognition","recognition","continous","interimResults","lang","console","log","start","onend","stop","onstart","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","transcriptArr","split","stopCmd","slice","finalText","join","onerror","error","render","container","button","interim","final","resultat","styles","display","flexDirection","alignItems","textAlign","width","height","background","borderRadius","margin","color","border","padding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\n\r\n//------------------------SPEECH RECOGNITION-----------------------------\r\n\r\n/* const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\n\r\nrecognition.continous = true\r\nrecognition.interimResults = true\r\nrecognition.lang = 'fr-FR'*/\r\n\r\n\r\n//------------------------COMPONENT-----------------------------\r\n\r\nexport default class Speech extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      listening: false\r\n    }\r\n    this.toggleListen = this.toggleListen.bind(this)\r\n    this.handleListen = this.handleListen.bind(this)\r\n  }\r\n\r\n  toggleListen() {\r\n    this.setState({\r\n      listening: !this.state.listening\r\n    }, this.handleListen)\r\n  }\r\n\r\n\r\n  handleListen() { \r\n\r\n    const SpeechRecognition = window.webkitSpeechRecognition\r\n    //const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\n    const recognition = new SpeechRecognition()\r\n    \r\n    recognition.continous = true\r\n    recognition.interimResults = true\r\n    recognition.lang = 'fr-FR'\r\n\r\n    console.log('listening?', this.state.listening)\r\n\r\n    if (this.state.listening) {\r\n      \r\n      recognition.start()\r\n      recognition.onend = () => {\r\n        console.log(\"...continue listening...\")\r\n        recognition.start()\r\n      }\r\n\r\n    } else {\r\n      recognition.stop()\r\n      recognition.onend = () => {\r\n        console.log(\"Stopped listening per click\")\r\n      }\r\n    }\r\n\r\n    recognition.onstart = () => {\r\n      console.log(\"Listening!\")\r\n    }\r\n\r\n    let finalTranscript = ''\r\n    recognition.onresult = event => {\r\n      let interimTranscript = ''\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';\r\n        else interimTranscript += transcript;\r\n      }\r\n      document.getElementById('interim').innerHTML = interimTranscript\r\n      document.getElementById('final').innerHTML = finalTranscript\r\n     //*************Resultat******************* */\r\n      if(interimTranscript === 'suivant'){\r\n        console.log(finalTranscript);\r\n        document.getElementById('resultat').innerHTML = \"Bravo\"\r\n      }\r\n    //-------------------------COMMANDS------------------------------------\r\n\r\n      const transcriptArr = finalTranscript.split(' ')\r\n      const stopCmd = transcriptArr.slice(-3, -1)\r\n      console.log('stopCmd', stopCmd)\r\n\r\n      if (stopCmd[0] === 'stop' && stopCmd[1] === 'stop'){\r\n        recognition.stop()\r\n        recognition.onend = () => {\r\n          console.log('Stopped listening per command')\r\n          const finalText = transcriptArr.slice(0, -3).join(' ')\r\n          document.getElementById('final').innerHTML = finalText          \r\n          //document.getElementById('resultat').innerHTML = finalText \r\n        }\r\n      }\r\n    }\r\n    \r\n  //-----------------------------------------------------------------------\r\n    \r\n    recognition.onerror = event => {\r\n      console.log(\"Error occurred in recognition: \" + event.error)\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div class=\"LoginBack\">\r\n\r\n      <div style={container}>\r\n        <button id='microphone-btn' style={button} onClick={this.toggleListen} />\r\n        <div id='interim' style={interim}></div>\r\n        <div id='final' style={final}></div>\r\n        <div id='resultat' style={resultat}></div>\r\n\r\n      </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n//-------------------------CSS------------------------------------\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    textAlign: 'center'\r\n  },\r\n  button: {\r\n    width: '60px',\r\n    height: '60px',\r\n    background: 'lightblue',\r\n    borderRadius: '50%',\r\n    margin: '6em 0 2em 0'\r\n  },\r\n  interim: {\r\n    color: 'gray',\r\n    border: '#ccc 1px solid',\r\n    padding: '1em',\r\n    margin: '1em',\r\n    width: '300px'\r\n  },\r\n  final: {\r\n    color: 'black',\r\n    border: '#ccc 1px solid',\r\n    padding: '1em',\r\n    margin: '1em',\r\n    width: '300px'\r\n  },\r\n  resultat: {\r\n    color: 'black',\r\n    border: '#ccc 1px solid',\r\n    padding: '1em',\r\n    margin: '1em',\r\n    width: '300px'\r\n  }\r\n}\r\n\r\nconst { container, button, interim, final, resultat } = styles"]},"metadata":{},"sourceType":"module"}